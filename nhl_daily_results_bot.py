#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NHL ‚Üí Telegram (RU): NHL-–≤—Ä–µ–º—è, sports.ru-–∏–º–µ–Ω–∞

–õ–æ–≥–∏–∫–∞:
1) –ë–µ—Ä—ë–º –æ–∫–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è –ø–æ –ú–°–ö:
   - –≤—Å–µ –º–∞—Ç—á–∏ REPORT_DATE,
   - –∏ –º–∞—Ç—á–∏ REPORT_DATE-1, –Ω–∞—á–∞–≤—à–∏–µ—Å—è >= 15:00 –ú–°–ö.
2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞:
   - —Ç—è–Ω–µ–º play-by-play –∏–∑ api-web.nhle.com (–ø–µ—Ä–∏–æ–¥, timeInPeriod, —Å—á—ë—Ç –ø–æ—Å–ª–µ –≥–æ–ª–∞).
   - –∏—â–µ–º —ç—Ç–æ—Ç –º–∞—Ç—á –Ω–∞ sports.ru —á–µ—Ä–µ–∑ –∏—Ö –ø–æ–∏—Å–∫:
       https://www.sports.ru/search/?q=<–ö–æ–º–∞–Ω–¥–∞1> <–ö–æ–º–∞–Ω–¥–∞2> –ù–•–õ <–¥–∞—Ç–∞ –ø–æ-—Ä—É—Å—Å–∫–∏>
     –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ /hockey/match/....html,
     –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ/–∫—Ä–æ—à–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–±–µ –∫–æ–º–∞–Ω–¥—ã.
   - —Å –º–∞—Ç—á–∞ sports.ru –≤—ã—Ç—è–≥–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –≤ –≤–∏–¥–µ:
       "1:0 ‚Äì 12:34 –ò–º—è –§–∞–º–∏–ª–∏—è (–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, ...)"
     –∏ —Å—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å: –∫–ª—é—á = (period, "MM:SS"), –∑–Ω–∞—á–µ–Ω–∏–µ = (–ê–≤—Ç–æ—Ä, [–∞—Å—Å–∏—Å—Ç—ã])
   - —Å–∫–ª–µ–∏–≤–∞–µ–º: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–ª–∞ –∏–∑ NHL –±–µ—Ä—ë–º —Ä—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ –∫–ª—é—á—É (period, timeInPeriod).
   - –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–∞–¥–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏–º–µ–Ω).
   - –±—É–ª–ª–∏—Ç—ã: –∏—â–µ–º "–ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç" –Ω–∞ sports.ru, –±–µ—Ä—ë–º –∏–º—è.
3) –ü–µ—á–∞—Ç—å: –∂–∏—Ä–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º, –≤—Ä–µ–º—è –≤ –∞–±—Å–æ–ª—é—Ç–µ (mm.ss), —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç.

ENV:
  TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
  REPORT_DATE=YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ú–°–ö)
"""

import os, sys, re, json, time, random, datetime as dt
from zoneinfo import ZoneInfo
from html import escape
import requests
from bs4 import BeautifulSoup
from typing import Dict, List, Tuple, Any, Optional
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TZ_MSK = ZoneInfo("Europe/Moscow")
API = "https://api-web.nhle.com"
SPORTS_SEARCH = "https://www.sports.ru/search/"
TEAM_META = {
    "NJD": ("üòà", "–ù—å—é-–î–∂–µ—Ä—Å–∏"),
    "NYI": ("üü†", "–ê–π–ª–µ–Ω–¥–µ—Ä—Å"),
    "NYR": ("üóΩ", "–†–µ–π–Ω–¥–∂–µ—Ä—Å"),
    "PHI": ("üõ©", "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è"),
    "PIT": ("üêß", "–ü–∏—Ç—Ç—Å–±—É—Ä–≥"),
    "BOS": ("üêª", "–ë–æ—Å—Ç–æ–Ω"),
    "BUF": ("ü¶¨", "–ë–∞—Ñ—Ñ–∞–ª–æ"),
    "MTL": ("üá®üá¶", "–ú–æ–Ω—Ä–µ–∞–ª—å"),
    "OTT": ("üõ°", "–û—Ç—Ç–∞–≤–∞"),
    "TOR": ("üçÅ", "–¢–æ—Ä–æ–Ω—Ç–æ"),
    "CAR": ("üå™Ô∏è", "–ö–∞—Ä–æ–ª–∏–Ω–∞"),
    "FLA": ("üêÜ", "–§–ª–æ—Ä–∏–¥–∞"),
    "TBL": ("‚ö°", "–¢–∞–º–ø–∞-–ë—ç–π"),
    "WSH": ("ü¶Ö", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω"),
    "CHI": ("ü¶Ö", "–ß–∏–∫–∞–≥–æ"),
    "DET": ("üî¥", "–î–µ—Ç—Ä–æ–π—Ç"),
    "NSH": ("üêØ", "–ù—ç—à–≤–∏–ª–ª"),
    "STL": ("üéµ", "–°–µ–Ω—Ç-–õ—É–∏—Å"),
    "CGY": ("üî•", "–ö–∞–ª–≥–∞—Ä–∏"),
    "EDM": ("üõ¢Ô∏è", "–≠–¥–º–æ–Ω—Ç–æ–Ω"),
    "VAN": ("üê≥", "–í–∞–Ω–∫—É–≤–µ—Ä"),
    "ANA": ("ü¶Ü", "–ê–Ω–∞—Ö–∞–π–º"),
    "DAL": ("‚≠ê", "–î–∞–ª–ª–∞—Å"),
    "LAK": ("üëë", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å"),
    "SJS": ("ü¶à", "–°–∞–Ω-–•–æ—Å–µ"),
    "CBJ": ("üí£", "–ö–æ–ª–∞–º–±—É—Å"),
    "COL": ("‚õ∞Ô∏è", "–ö–æ–ª–æ—Ä–∞–¥–æ"),
    "MIN": ("üå≤", "–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞"),
    "WPG": ("‚úàÔ∏è", "–í–∏–Ω–Ω–∏–ø–µ–≥"),
    "ARI": ("ü¶£", "–Æ—Ç–∞"),   # –ê—Ä–∏–∑–æ–Ω–∞ ‚Üí –Æ—Ç–∞
    "SEA": ("ü¶ë", "–°–∏—ç—Ç–ª"),
    "VGK": ("üé∞", "–í–µ–≥–∞—Å"),
}

RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä–∞"
}
def ru_date(d: dt.date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def make_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=5, connect=5, read=5, backoff_factor=0.6,
        status_forcelist=[429,500,502,503,504],
        allowed_methods=["GET","POST"],
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({
        "User-Agent": "NHL-RU-Merger/1.0",
        "Accept": "text/html,application/json,*/*",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
        "Connection": "keep-alive",
    })
    return s

S = make_session()

def get_json(url: str) -> dict:
    r = S.get(url, timeout=25)
    if r.status_code == 200:
        return r.json()
    raise RuntimeError(f"GET {url} -> {r.status_code}")

def get_html(url: str) -> str:
    r = S.get(url, timeout=25)
    if r.status_code == 200:
        return r.text
    raise RuntimeError(f"GET {url} -> {r.status_code}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–∫–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è
def report_date() -> dt.date:
    env = os.getenv("REPORT_DATE","").strip()
    if env:
        return dt.date.fromisoformat(env)
    return dt.datetime.now(TZ_MSK).date()

def window_msk(d: dt.date) -> Tuple[dt.datetime, dt.datetime]:
    start = dt.datetime.combine(d - dt.timedelta(days=1), dt.time(15,0), tzinfo=TZ_MSK)
    end   = dt.datetime.combine(d, dt.time(23,59,59,999000), tzinfo=TZ_MSK)
    return start, end

def to_msk(utc_iso: str) -> dt.datetime:
    return dt.datetime.fromisoformat(utc_iso.replace("Z","+00:00")).astimezone(TZ_MSK)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ NHL schedule & pbp
def pick_games(d: dt.date) -> List[dict]:
    start, end = window_msk(d)
    all_days = [d - dt.timedelta(days=1), d]
    games = []
    for day in all_days:
        js = get_json(f"{API}/v1/schedule/{day.isoformat()}")
        lst = js.get("games") or js.get("gameWeek",[{}])[0].get("games",[])
        games.extend(lst)
    picked = []
    seen = set()
    for g in games:
        gid = int(g.get("id") or 0)
        if not gid or gid in seen: continue
        seen.add(gid)
        utc = g.get("startTimeUTC") or g.get("startTime")
        if not utc: continue
        msk = to_msk(utc)
        if start <= msk <= end:
            picked.append({
                "id": gid,
                "msk": msk,
                "home": g["homeTeam"]["abbrev"],
                "away": g["awayTeam"]["abbrev"],
            })
    picked.sort(key=lambda x: x["msk"])
    return picked

def pbp_and_scores(gid: int) -> Tuple[List[dict], dict]:
    pbp = get_json(f"{API}/v1/gamecenter/{gid}/play-by-play")
    # list of goals
    events = []
    for p in pbp.get("plays", []):
        if (p.get("typeDescKey") or "").lower() != "goal":
            continue
        per = int((p.get("periodDescriptor") or {}).get("number") or 0)
        t_in = (p.get("timeInPeriod") or p.get("timeRemaining") or "00:00").strip()
        hs = p.get("homeScore", 0); as_ = p.get("awayScore", 0)
        events.append({"period": per, "t": t_in, "score": f"{hs}:{as_}"})
    outcome = (pbp.get("gameOutcome") or {}).get("lastPeriodType")  # REG/OT/SO
    return events, {"decision": outcome}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—Ä–µ–º—è: –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã
def abs_time(period: int, mmss: str) -> str:
    m = re.match(r"^\s*(\d{1,2})[:.](\d{2})\s*$", mmss)
    if not m:
        return mmss.replace(":", ".")
    mm, ss = int(m.group(1)), int(m.group(2))
    base = (period-1)*20 if period<=3 else 60 + 5*(period-4)
    return f"{base + mm}.{ss:02d}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ –Ω–∞ sports.ru
def build_search_query(home_ru: str, away_ru: str, d: dt.date) -> str:
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: "–¢–∞–º–ø–∞-–ë—ç–π –ê–Ω–∞—Ö–∞–π–º –ù–•–õ 27 –æ–∫—Ç—è–±—Ä—è 2025"
    return f"{home_ru} {away_ru} –ù–•–õ {ru_date(d)} {d.year}"

def find_sportsru_match_url(home_ru: str, away_ru: str, d: dt.date) -> Optional[str]:
    q = build_search_query(home_ru, away_ru, d)
    r = S.get(SPORTS_SEARCH, params={"q": q}, timeout=25)
    if r.status_code != 200:
        return None
    soup = BeautifulSoup(r.text, "html.parser")
    # –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á: /hockey/match/.....html
    cands = []
    for a in soup.find_all("a", href=True):
        href = a["href"]
        txt = a.get_text(" ", strip=True)
        if "/hockey/match/" in href and href.endswith(".html"):
            if not href.startswith("http"):
                href = "https://www.sports.ru" + href
            # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–±–µ –∫–æ–º–∞–Ω–¥—ã
            if home_ru.split()[0] in txt and away_ru.split()[0] in txt:
                cands.append(href)
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤–æ–∑—å–º—ë–º –≤–æ–æ–±—â–µ –ø–µ—Ä–≤—É—é –º–∞—Ç—á–µ–≤—É—é —Å—Å—ã–ª–∫—É
    if not cands:
        for a in soup.find_all("a", href=True):
            href = a["href"]
            if "/hockey/match/" in href and href.endswith(".html"):
                if not href.startswith("http"):
                    href = "https://www.sports.ru" + href
                cands.append(href)
    return cands[0] if cands else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ–≤ –Ω–∞ sports.ru -> –∫–∞—Ä—Ç–∞ (period, "MM:SS") -> (–ê–≤—Ç–æ—Ä, [–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã])
GOAL_LINE_RE = re.compile(
    r"(?P<score>\d+:\d+)\s*[‚Äî‚Äì-]\s*(?P<time>\d{1,2}[:.]\d{2})\s+(?P<who>[–ê-–Ø–Å][^()\n\r]*?)(?:\s*\((?P<ass>[^)]*)\))?(?=\s|$)",
    re.U
)
PERIOD_HEADERS = [
    (re.compile(r"\b1[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 1),
    (re.compile(r"\b2[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 2),
    (re.compile(r"\b3[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 3),
    (re.compile(r"\b–û–≤–µ—Ä—Ç–∞–π–º(?:\s*‚Ññ\s*(\d+))?\b", re.I | re.U), 4),  # 4 = OT1; –µ—Å–ª–∏ ‚ÑñN ‚Üí 3+N
]

def ru_initial(full: str) -> str:
    t = re.sub(r"\s+", " ", (full or "").strip())
    if not t: return ""
    parts = t.split(" ")
    if len(parts) == 1:
        return parts[0]
    return f"{parts[0][0]}. {parts[-1]}"

def parse_sportsru_goals(url: str) -> Tuple[Dict[Tuple[int,str], Tuple[str, List[str]]], Optional[str]]:
    html = get_html(url)
    soup = BeautifulSoup(html, "html.parser")
    txt = soup.get_text("\n", strip=True)
    txt = txt.replace("‚Äî", "‚Äì").replace("‚àí", "‚Äì").replace("‚Äí", "‚Äì")

    # –í—ã–¥–µ–ª—è–µ–º –±–ª–æ–∫ –≥–æ–ª–æ–≤ (–º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤)
    start = None
    for m in re.finditer(r"(1[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥|–ì–æ–ª—ã|–•–æ–¥ –º–∞—Ç—á–∞)", txt, re.I):
        start = m.start(); break
    if start is None:
        start = 0
    endm = re.search(r"(–ë—É–ª–ª–∏—Ç—ã|–°–µ—Ä–∏—è –±—É–ª–ª–∏—Ç–æ–≤|–£–¥–∞–ª–µ–Ω–∏—è|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–°–æ—Å—Ç–∞–≤—ã)", txt, re.I)
    end = endm.start() if endm else len(txt)
    section = txt[start:end]

    # –†–∞–∑–±–∏—Ä–∞–µ–º
    period = 1
    by_key: Dict[Tuple[int,str], Tuple[str, List[str]]] = {}
    lines = [ln.strip() for ln in section.split("\n") if ln.strip()]
    for ln in lines:
        # —Å–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
        sw = False
        for rx, base in PERIOD_HEADERS:
            m = rx.search(ln)
            if m:
                if base == 4 and m.lastindex == 1 and m.group(1):
                    period = 3 + max(1, int(m.group(1)))
                else:
                    period = base
                sw = True
                break
        if sw:
            continue

        for m in GOAL_LINE_RE.finditer(ln):
            mmss = m.group("time").replace(".", ":")
            who = m.group("who").strip()
            ass = (m.group("ass") or "").strip()
            who_sh = ru_initial(re.split(r"\s+[‚Äì-]\s+", who)[0].strip())
            assists: List[str] = []
            if ass:
                for a in ass.split(","):
                    aa = ru_initial(re.split(r"\s+[‚Äì-]\s+", a.strip())[0].strip())
                    if aa:
                        assists.append(aa)
            by_key[(period, mmss)] = (who_sh, assists)

    # –ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç:
    so_winner = None
    m = re.search(r"–ü–æ–±–µ–¥–Ω—ã–π\s+–±—É–ª–ª–∏—Ç[:\s‚Äì-]+([–ê-–Ø–Å][^,\n\r]+)", txt, re.I)
    if m:
        so_winner = ru_initial(m.group(1).strip())

    return by_key, so_winner

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–≤–æ–¥ –º–∞—Ç—á–∞
def build_match_block(g: dict) -> str:
    gid = g["id"]
    nhl_goals, meta = pbp_and_scores(gid)
    decision = meta.get("decision")  # REG/OT/SO
    h_emoji, h_ru = TEAM_META.get(g["home"], ("üèí", g["home"]))
    a_emoji, a_ru = TEAM_META.get(g["away"], ("üèí", g["away"]))

    # –ù–∞–π–¥—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞ –Ω–∞ sports.ru (–∏—â–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ç—á—ë—Ç–∞, –∞ –Ω–µ –ø–æ —Å—Ç–∞—Ä—Ç—É ‚Äî —á–∞—â–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π)
    url = find_sportsru_match_url(h_ru, a_ru, g["msk"].date())
    if not url:
        # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∫–∞–Ω—É–Ω–µ (–µ—Å–ª–∏ –º–∞—Ç—á –ø–æ–ø–∞–ª –∏–∑ –≤—á–µ—Ä–∞—à–Ω–∏—Ö)
        url = find_sportsru_match_url(h_ru, a_ru, (g["msk"] - dt.timedelta(days=1)).date())
    if not url:
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ç—á –Ω–∞ sports.ru –¥–ª—è {h_ru} ‚Äî {a_ru} ({g['msk']:%d.%m})")

    ru_map, so_winner = parse_sportsru_goals(url)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç (–≤–æ–∑—å–º—ë–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–∞ NHL; –µ—Å–ª–∏ —Å–µ—Ä–∏–∏/–û–¢ ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–º–µ—Ç–∫—É)
    if nhl_goals:
        last = nhl_goals[-1]["score"]
        hs, as_ = map(int, last.split(":"))
    else:
        # –µ—Å–ª–∏ –≥–æ–ª–æ–≤ –Ω–µ –±—ã–ª–æ ‚Äî –≤–æ–∑—å–º—ë–º –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã sports.ru –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—É–ø—É—Å—Ç–∏–º ‚Äî —Ä–µ–¥–∫–æ—Å—Ç—å)
        hs = as_ = 0

    # –ñ–∏—Ä–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    home_line = f"{h_emoji} ¬´{h_ru}¬ª: {hs}"
    away_line = f"{a_emoji} ¬´{a_ru}¬ª: {as_}"
    if hs > as_:
        home_line = f"<b>{home_line}</b>"
    elif as_ > hs:
        away_line = f"<b>{away_line}</b>"
    suffix = ""
    if decision == "OT": suffix = " (–û–¢)"
    if decision == "SO": suffix = " (–ë)"

    parts = [home_line + suffix, away_line, ""]

    # –°–∫–ª–µ–π–∫–∞: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–ª–∞ NHL –Ω–∞–π–¥—ë–º –∞–≤—Ç–æ—Ä–∞/–∞—Å—Å–∏—Å—Ç–æ–≤ –ø–æ (period, timeInPeriod) –Ω–∞ sports.ru
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —Å–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –∏ —É–ø–∞–¥—ë–º –æ–¥–Ω–æ–π –æ—à–∏–±–∫–æ–π
    missing = []
    goals_by_period: Dict[int, List[str]] = {}
    for ev in nhl_goals:
        key = (ev["period"], ev["t"])
        if key not in ru_map:
            # –ò–Ω–æ–≥–¥–∞ sports.ru –ø–∏—à–µ—Ç 09:05 vs 9:05 ‚Äî —É –Ω–∞—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: —É–±–µ—Ä—ë–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –≤ –º–∏–Ω—É—Ç–∞—Ö
            mm, ss = ev["t"].split(":")
            alt = f"{int(mm)}:{ss}"
            if (ev["period"], alt) in ru_map:
                key = (ev["period"], alt)
            else:
                missing.append(f"p{ev['period']} {ev['t']} (score {ev['score']})")
                continue
        who, assists = ru_map[key]
        line = f"{ev['score']} ‚Äì {abs_time(ev['period'], ev['t'])} {who}"
        if assists:
            line += f" ({', '.join(assists)})"
        goals_by_period.setdefault(ev["period"], []).append(line)

    if missing:
        raise RuntimeError("–ù–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ sports.ru:\n" + "\n".join(missing))

    # –ü–µ—á–∞—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    for p in sorted(goals_by_period.keys()):
        if p <= 3:
            parts.append(f"<i>{p}-–π –ø–µ—Ä–∏–æ–¥</i>")
        else:
            parts.append(f"<i>–û–≤–µ—Ä—Ç–∞–π–º ‚Ññ{p-3}</i>")
        parts.extend(goals_by_period[p])

    # –ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç (–µ—Å–ª–∏ –±—ã–ª –∏ –Ω–∞—à–ª–∏ –∏–º—è)
    if decision == "SO" and so_winner:
        parts.append("–ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç")
        parts.append(so_winner)

    return "\n".join(parts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º
def build_post(d: dt.date) -> str:
    games = pick_games(d)
    title = f"üóì –†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ù–•–õ ‚Ä¢ {ru_date(d)} ‚Ä¢ {len(games)} " + \
            ("–º–∞—Ç—á" if len(games)==1 else "–º–∞—Ç—á–∞" if len(games)%10 in (2,3,4) and not 12<=len(games)%100<=14 else "–º–∞—Ç—á–µ–π")
    head = f"{title}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"

    if not games:
        return head.strip()

    blocks = []
    for i, g in enumerate(games, 1):
        blocks.append(build_match_block(g))
        if i < len(games):
            blocks.append("")
    return head + "\n".join(blocks).strip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram
def tg_send(text: str):
    token, chat = os.getenv("TELEGRAM_BOT_TOKEN","").strip(), os.getenv("TELEGRAM_CHAT_ID","").strip()
    if not token or not chat:
        print(text)
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    r = S.post(url, json={"chat_id": chat, "text": text, "parse_mode":"HTML", "disable_web_page_preview": True}, timeout=25)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text[:200]}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main
if __name__ == "__main__":
    try:
        d = report_date()
        msg = build_post(d)
        tg_send(msg)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
