# nhl_daily_results_bot.py
# -*- coding: utf-8 -*-

import os, sys, re, json, time
import datetime as dt
from zoneinfo import ZoneInfo
from html import escape
from typing import List, Dict, Tuple, Optional

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# =========================
# –ö–æ–Ω—Ñ–∏–≥
# =========================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞ (UTC, YYYY-MM-DD). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è UTC –∏ +/‚àí 1 –¥–µ–Ω—å –¥–ª—è –æ—Ö–≤–∞—Ç–∞.
REPORT_DATE_UTC = os.getenv("REPORT_DATE_UTC", "").strip()

# –ì—Ä–æ–º–∫–æ—Å—Ç—å –ª–æ–≥–æ–≤
DEBUG = os.getenv("DEBUG", "1").strip() not in ("0", "false", "False")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ –Ω–æ–≤–æ–º NHL API
COMPLETED_STATES = {"FINAL", "OFF"}  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: –¥–æ–±–∞–≤–∏—Ç—å "OVER" –¥–ª—è ¬´—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–∏—Ä–µ–Ω—ã¬ª

# –ö–∞—Ä—Ç–∞ —Ä—É—Å—Å–∫–∏—Ö —ç–º–æ–¥–∑–∏/–∏–∫–æ–Ω–æ–∫ –ø–æ triCode (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ–µ)
TEAM_EMOJI = {
    "VGK": "üé∞",
    "COL": "‚õ∞Ô∏è",
    "WSH": "ü¶Ö",
    "NYI": "üü†",
    "ANA": "ü¶Ü",
    "DET": "üî¥",
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏ —Å–ø–∏—Å–æ–∫
}

# –ö–∞—Ä—Ç–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ –ø–æ triCode
TEAM_RU = {
    "VGK": "¬´–í–µ–≥–∞—Å¬ª",
    "COL": "¬´–ö–æ–ª–æ—Ä–∞–¥–æ¬ª",
    "WSH": "¬´–í–∞—à–∏–Ω–≥—Ç–æ–Ω¬ª",
    "NYI": "¬´–ê–π–ª–µ–Ω–¥–µ—Ä—Å¬ª",
    "ANA": "¬´–ê–Ω–∞—Ö–∞–π–º¬ª",
    "DET": "¬´–î–µ—Ç—Ä–æ–π—Ç¬ª",
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏ —Å–ø–∏—Å–æ–∫
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ teamId -> sports.ru slug –∫–ª—É–±–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL –º–∞—Ç—á–∞)
SPORTSRU_SLUG_BY_TEAMID = {
    54: "vegas-golden-knights",
    21: "colorado-avalanche",
    15: "washington-capitals",
    2:  "new-york-islanders",
    24: "anaheim-ducks",
    17: "detroit-red-wings",
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
}

# –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"
}

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def dbg(msg: str):
    if DEBUG:
        print(f"[DBG] {msg}")

def make_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=6, connect=6, read=6, backoff_factor=0.5,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["GET", "POST"],
        raise_on_status=False
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({"User-Agent": "HOH-NHL-Daily-Results/1.4"})
    return s

SESSION = make_session()

def iso2date(s: str) -> dt.date:
    # "YYYY-MM-DD"
    return dt.date.fromisoformat(s)

def day_span(center_utc: dt.date) -> List[dt.date]:
    # –ë–µ—Ä—ë–º ¬´–≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞¬ª UTC –¥–ª—è –æ—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ —Å—É—Ç–∫–∏
    return [center_utc - dt.timedelta(days=1), center_utc, center_utc + dt.timedelta(days=1)]

def ru_date(d: dt.date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def mmss_to_seconds(mmss: str) -> int:
    # "MM:SS" -> seconds
    m, s = mmss.split(":")
    return int(m) * 60 + int(s)

def gameclock_to_pretty(total_seconds: int) -> str:
    # –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "M.SS" –≥–¥–µ M ‚Äî –º–∏–Ω—É—Ç—ã –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ç—á–∞, SS ‚Äî —Å–µ–∫—É–Ω–¥—ã —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
    m = total_seconds // 60
    s = total_seconds % 60
    return f"{m}.{s:02d}"

def period_number_to_title(n: int) -> str:
    if n == 1:
        return "_1-–π –ø–µ—Ä–∏–æ–¥_"
    if n == 2:
        return "_2-–π –ø–µ—Ä–∏–æ–¥_"
    if n == 3:
        return "_3-–π –ø–µ—Ä–∏–æ–¥_"
    if n > 3:
        return f"_–û–≤–µ—Ä—Ç–∞–π–º ‚Ññ{n-3}_"
    return "_–ü–µ—Ä–∏–æ–¥_"

# =========================
# NHL API
# =========================
def fetch_schedule(date_ymd: str) -> List[dict]:
    url = f"https://api-web.nhle.com/v1/schedule/{date_ymd}"
    dbg(f"GET {url}")
    r = SESSION.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    games = []
    for day in data.get("gameWeek", []):
        for g in day.get("games", []):
            games.append(g)
    return games

def collect_completed_games(center_utc: dt.date) -> List[dict]:
    # –°–∫–ª–µ–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã (FINAL –∏–ª–∏ OFF) –∑–∞ 3 —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–Ω—è UTC
    uniq = {}
    for d in day_span(center_utc):
        ds = d.strftime("%Y-%m-%d")
        games = fetch_schedule(ds)
        for g in games:
            state = g.get("gameState")
            gid = g.get("id")
            if state in COMPLETED_STATES:
                dbg(f"take completed: {gid} {state}")
                uniq[gid] = g
            else:
                dbg(f"skip not final: {gid} {state}")
    lst = list(uniq.values())
    dbg(f"Collected unique FINAL games: {len(lst)}")
    return lst

def fetch_standings_now() -> Dict[int, Tuple[int,int,int,int]]:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç teamId -> (W, L, OT, PTS)
    url = "https://api-web.nhle.com/v1/standings/now"
    dbg(f"GET {url}")
    try:
        r = SESSION.get(url, timeout=20)
        r.raise_for_status()
        data = r.json()
    except Exception as e:
        dbg(f"standings error: {repr(e)}")
        return {}
    out = {}
    # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî —Å–ø–∏—Å–∫–∏ –ø–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º/–¥–∏–≤–∏–∑–∏–æ–Ω–∞–º; —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ "teamRecords"
    def scan(container):
        if isinstance(container, dict):
            for k, v in container.items():
                scan(v)
        elif isinstance(container, list):
            for item in container:
                scan(item)
        else:
            return
    # –Ω–æ –ø—Ä–æ—â–µ ‚Äî –ø—Ä–æ–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    records = []
    for key in ("standings", "teamRecords", "records", "wildCard", "overallStandings"):
        if key in data and isinstance(data[key], list):
            records.extend(data[key])
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –ø–æ–∏—â–µ–º –≥–ª—É–±–∂–µ:
    if not records:
        for v in data.values():
            if isinstance(v, list):
                for item in v:
                    if isinstance(item, dict) and "teamRecords" in item:
                        records.extend(item["teamRecords"])

    count = 0
    for rec in records:
        try:
            team = rec.get("team", {})
            team_id = team.get("id")
            w = int(rec.get("wins", rec.get("w", 0)) or 0)
            l = int(rec.get("losses", rec.get("l", 0)) or 0)
            ot = int(rec.get("otLosses", rec.get("ot", 0)) or 0)
            pts = int(rec.get("points", rec.get("p", 0)) or 0)
            if team_id:
                out[int(team_id)] = (w, l, ot, pts)
                count += 1
        except Exception:
            pass
    dbg(f"records loaded: {len(out)}")
    return out

def fetch_pbp(game_id: int) -> dict:
    url = f"https://api-web.nhle.com/v1/gamecenter/{game_id}/play-by-play"
    dbg(f"GET {url}")
    r = SESSION.get(url, timeout=20)
    r.raise_for_status()
    return r.json()

def extract_goals_from_pbp(pbp: dict, home_id: int, away_id: int) -> Tuple[List[dict], bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ–±—ã—Ç–∏—è:
        { "period": int, "tsec": total_seconds_from_start, "team_id": int }
      - –ø—Ä–∏–∑–Ω–∞–∫ shootout (–±—É–ª–ª–∏—Ç—ã)
    """
    plays = pbp.get("plays") or pbp.get("playByPlay") or []
    # –ò–Ω–æ–≥–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏ "plays" -> list of dicts —Å –ø–æ–ª—è–º–∏ typeDescKey, periodDescriptor, timeInPeriod, details...
    goals = []
    shootout = False

    def parse_period(ev) -> Optional[int]:
        pd = ev.get("periodDescriptor") or {}
        if isinstance(pd, dict) and "number" in pd:
            try:
                return int(pd["number"])
            except Exception:
                pass
        if "period" in ev:
            try:
                return int(ev["period"])
            except Exception:
                pass
        return None

    def parse_time_in_period(ev) -> Optional[str]:
        # —Ñ–æ—Ä–º–∞—Ç—ã: "MM:SS"
        for k in ("timeInPeriod", "clock", "time"):
            if k in ev and isinstance(ev[k], str) and ":" in ev[k]:
                return ev[k]
        det = ev.get("details") or {}
        if "timeInPeriod" in det and ":" in str(det["timeInPeriod"]):
            return str(det["timeInPeriod"])
        return None

    def parse_team_id(ev) -> Optional[int]:
        det = ev.get("details") or {}
        # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        for k in ("eventOwnerTeamId", "teamId", "scoringTeamId"):
            val = det.get(k)
            if isinstance(val, int):
                return val
            if isinstance(val, str) and val.isdigit():
                return int(val)
        # –∏–Ω–æ–≥–¥–∞ –µ—Å—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å "team" —Å "id"
        team = ev.get("team") or {}
        if isinstance(team, dict):
            tid = team.get("id")
            if isinstance(tid, int):
                return tid
        return None

    sample_has_score_fields = False

    for ev in plays:
        typ = (ev.get("typeDescKey") or ev.get("type") or "").lower()
        if "shootout" in typ:
            shootout = True
        is_goal = ("goal" in typ) and ("no_goal" not in typ)
        if not is_goal:
            continue
        per = parse_period(ev)
        mmss = parse_time_in_period(ev)
        tid = parse_team_id(ev)

        if per is None or mmss is None:
            continue

        # total seconds –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ç—á–∞
        sec = mmss_to_seconds(mmss) + (per - 1) * 20 * 60
        goals.append({"period": per, "tsec": sec, "team_id": tid})

        # –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è —Å—á—ë—Ç–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ —á–∞—Å—Ç–æ –Ω–µ—Ç ‚Äî –ø–æ—ç—Ç–æ–º—É —Å—Ç—Ä–æ–∏–º —Å—á—ë—Ç —Å–∞–º–∏
        if any(k in ev for k in ("homeScore", "awayScore")):
            sample_has_score_fields = True

    goals.sort(key=lambda x: x["tsec"])
    dbg(f"PBP goals: {len(goals)} shootout:{shootout} sample_has_score_fields={sample_has_score_fields}")
    return goals, shootout

# =========================
# sports.ru –ø–∞—Ä—Å–µ—Ä –≥–æ–ª–æ–≤
# =========================
SPORTSRU_HOST = "https://www.sports.ru"

def get_sportsru_match_goals(slug: str) -> List[Tuple[int, str, List[str]]]:
    """
    –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –º–∞—Ç—á–∞ –Ω–∞ sports.ru:
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (total_seconds, author_ru, assists_ru_list)
    –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
      "58:44  –ì–æ–ª!  –ë–∞—Ä–∑—ç–ª"
      "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã: –ü–µ–ª–µ–∫, ..."
    –ª–∏–±–æ "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ...".
    """
    # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –±–µ–∑ /lineups/
    url = f"{SPORTSRU_HOST}/hockey/match/{slug}/"
    dbg(f"GET {url}")
    r = SESSION.get(url, timeout=20)
    if r.status_code != 200:
        return []

    html = r.text
    # –ù–∞–π–¥—ë–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞–ª–µ–µ "–ì–æ–ª!"
    # –ë—É–¥–µ–º –∏–¥—Ç–∏ –ø—Ä–æ—Å—Ç—ã–º —Ä–µ–≥–µ–∫—Å–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞—Ç–µ–º –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π "–ì–æ–ª!" –∏ –∞–≤—Ç–æ—Ä/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    # –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞:
    # 58:44
    # –ì–æ–ª!  –ë–∞—Ä–∑—ç–ª
    # –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ü–µ–ª–µ–∫
    time_re = re.compile(r"(\d{1,2}:\d{2})")
    goal_line_re = re.compile(r"–ì–æ–ª!\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë\-\.\s]+)")
    ass1_re = re.compile(r"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë\-\.\s]+)")
    assN_re = re.compile(r"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë\-\.\s,]+)")

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∏—Å–∫–∞
    lines = html.splitlines()
    res = []
    for i, line in enumerate(lines):
        # –∏—â–µ–º –≤—Ä–µ–º—è
        m = time_re.search(line)
        if not m:
            continue
        mmss = m.group(1)
        # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º "–ì–æ–ª!" (–≤ —ç—Ç–æ–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö)
        neighborhood = "\n".join(lines[i:i+6])
        gm = goal_line_re.search(neighborhood)
        if not gm:
            continue
        scorer_raw = gm.group(1).strip()
        # –∞—Å—Å–∏—Å—Ç—ã
        assists = []
        m1 = ass1_re.search(neighborhood)
        if m1:
            assists = [m1.group(1).strip()]
        else:
            mN = assN_re.search(neighborhood)
            if mN:
                assists = [x.strip() for x in mN.group(1).split(",") if x.strip()]

        total = mmss_to_seconds(mmss)
        res.append((total, scorer_raw, assists))

    # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    res.sort(key=lambda x: x[0])
    return res

def sportsru_goals_for_pair(home_id: int, away_id: int) -> List[Tuple[int, str, List[str]]]:
    # –ü—Ä–æ–±—É–µ–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–ª–∞–≥–æ–≤: away-vs-home –∏ home-vs-away
    slug_home = SPORTSRU_SLUG_BY_TEAMID.get(home_id)
    slug_away = SPORTSRU_SLUG_BY_TEAMID.get(away_id)
    if not slug_home or not slug_away:
        return []

    tried = []
    for slug in (f"{slug_away}-vs-{slug_home}", f"{slug_home}-vs-{slug_away}"):
        tried.append(slug)
        goals = get_sportsru_match_goals(slug)
        if goals:
            dbg(f"sports.ru matched matchpage: {slug} goals: {len(goals)}")
            return goals
    dbg(f"sports.ru no goals for pair {slug_away.upper()} {slug_home.upper()} tried: {tried}")
    return []

# =========================
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# =========================
def build_game_block(g: dict, standings: Dict[int, Tuple[int,int,int,int]]) -> str:
    """
    g ‚Äî –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã –∏–∑ NHL schedule.
    –°—Ç—Ä–æ–∏–º –±–ª–æ–∫:
      <emoji> ¬´–•–æ–∑—è–µ–≤–∞¬ª: X (W-L-OT, P –æ.)
      <emoji> ¬´–ì–æ—Å—Ç–∏¬ª:   Y (W-L-OT, P –æ.)
      <—Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º: "S:T ‚Äì mm.ss –ê–≤—Ç–æ—Ä (–ê—Å—Å–∏—Å—Ç—ã)">
    """
    gid = int(g.get("id"))
    home = g.get("homeTeam", {})
    away = g.get("awayTeam", {})
    home_id = int(home.get("id"))
    away_id = int(away.get("id"))
    home_tri = home.get("abbrev") or home.get("triCode") or ""
    away_tri = away.get("abbrev") or away.get("triCode") or ""

    home_emoji = TEAM_EMOJI.get(home_tri, "üèí")
    away_emoji = TEAM_EMOJI.get(away_tri, "üèí")
    home_ru    = TEAM_RU.get(home_tri, f"¬´{home.get('name', '–•–æ–∑—è–µ–≤–∞')}¬ª")
    away_ru    = TEAM_RU.get(away_tri, f"¬´{away.get('name', '–ì–æ—Å—Ç–∏')}¬ª")

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç
    scores = g.get("homeTeam", {}).get("score"), g.get("awayTeam", {}).get("score")
    # –Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
    home_score = int(home.get("score", 0))
    away_score = int(away.get("score", 0))

    # –†–µ–∫–æ—Ä–¥—ã –∫–æ–º–∞–Ω–¥
    def rec_str(team_id: int) -> str:
        w,l,ot,pts = standings.get(team_id, (None,None,None,None))
        if w is None:
            return ""
        return f" ({w}-{l}-{ot}, {pts} –æ.)"

    header = []
    header.append(f"{home_emoji} {home_ru}: {home_score}{rec_str(home_id)}")
    header.append(f"{away_emoji} {away_ru}: {away_score}{rec_str(away_id)}")

    # –ì–æ–ª—ã –∏–∑ NHL PBP (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –ø–æ —Ö–æ–¥—É) + –∏–º–µ–Ω–∞ —Å sports.ru
    pbp = fetch_pbp(gid)
    goals_pbp, shootout = extract_goals_from_pbp(pbp, home_id, away_id)

    # –∏–º–µ–Ω–∞ —Å sports.ru (–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç —Å—Ç–∞—Ä—Ç–∞)
    sr_goals = sportsru_goals_for_pair(home_id, away_id)
    # —Å—Ç—Ä–æ–∏–º ‚Äú–≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Ç–∫—É‚Äù –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–º—ë–Ω –∫ –≥–æ–ª–∞–º NHL –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    # –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å +/- 3 —Å–µ–∫
    def match_name_by_time(tsec: int) -> Tuple[str, List[str]]:
        if not sr_goals:
            return "‚Äî", []
        best = None
        best_dd = 999
        for (ts, author, assists) in sr_goals:
            dd = abs(ts - tsec)
            if dd < best_dd:
                best = (author, assists)
                best_dd = dd
        if best and best_dd <= 3:
            return best[0], best[1]
        return "‚Äî", []

    # –°—á—ë—Ç –ø–æ —Ö–æ–¥—É
    home_run = 0
    away_run = 0
    by_period: Dict[int, List[str]] = {}

    for ev in goals_pbp:
        per = int(ev["period"])
        tsec = int(ev["tsec"])
        tid = ev.get("team_id")

        # –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–∏–ª–∞
        if tid == home_id:
            home_run += 1
        elif tid == away_id:
            away_run += 1
        else:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–±–∏–≤—à–µ–π, –Ω–æ —Å—á—ë—Ç –Ω–µ —Å–æ–±—å—ë–º
            # (—Ö–æ—Ç—è —Ç–∞–∫–æ–µ –ø–æ—á—Ç–∏ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)
            pass

        # —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        pretty = gameclock_to_pretty(tsec)

        # –∏–º–µ–Ω–∞
        author, assists = match_name_by_time(tsec)
        if assists:
            line = f"{home_run}:{away_run} ‚Äì {pretty} {author} ({', '.join(assists)})"
        else:
            line = f"{home_run}:{away_run} ‚Äì {pretty} {author}"

        by_period.setdefault(per, []).append(line)

    # –µ—Å–ª–∏ –±—É–ª–ª–∏—Ç—ã –±—ã–ª–∏ ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–Ω—ã–π –≥–æ–ª (–Ω–∞ sports.ru –µ–≥–æ —è–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ NHL)
    # –í –Ω–æ–≤–æ–º API –ø–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º; –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫
    # (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å; –∫–æ–≥–¥–∞ NHL –ø–æ–º–µ—á–∞–µ—Ç shootout=True, –Ω–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏—è ‚Äî –æ–ø—É—Å–∫–∞–µ–º)
    # –í –≤—ã–≤–æ–¥–µ ‚Äú–±—É–ª–ª–∏—Ç—ã‚Äù –ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ ‚Äú–ø–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç‚Äù, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω.
    # –ó–¥–µ—Å—å –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–±–µ–¥–Ω–æ–≥–æ –±—É–ª–ª–∏—Ç–∞ –∏–∑ pbp, —Ç.–∫. –Ω–µ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ç—á–µ –±—ã–ª–æ –Ω—É–∂–Ω–æ –≤ —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä–∞—Ö.

    # –°–±–æ—Ä–∫–∞ –±–ª–æ–∫–∞
    out_lines = []
    out_lines.extend(header)
    if not goals_pbp:
        out_lines.append("")
        out_lines.append("‚Äî —Å–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return "\n".join(out_lines)

    # –ø–µ—Ä–∏–æ–¥–∞–º–∏
    for per in sorted(by_period.keys()):
        out_lines.append("")
        out_lines.append(period_number_to_title(per))
        out_lines.extend(by_period[per])

    return "\n".join(out_lines)

def build_message() -> str:
    # –û–ø–æ—Ä–Ω–∞—è –¥–∞—Ç–∞ UTC
    if REPORT_DATE_UTC:
        try:
            base = iso2date(REPORT_DATE_UTC)
        except Exception:
            base = dt.datetime.now(dt.timezone.utc).date()
    else:
        base = dt.datetime.now(dt.timezone.utc).date()

    games = collect_completed_games(base)
    standings = fetch_standings_now()

    # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ ‚Äî –ø–æ –ï–≤—Ä–æ–ø–µ/–ë–µ—Ä–ª–∏–Ω (–∫–∞–∫ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
    tz_berlin = ZoneInfo("Europe/Berlin")
    today_ber = dt.datetime.now(tz_berlin).date()
    head_date = f"{today_ber.day} {RU_MONTHS[today_ber.month]}"

    title = f"üóì –†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ù–•–õ ‚Ä¢ {head_date} ‚Ä¢ {len(games)} –º–∞—Ç—á–µ–π"
    lines = [title, "", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá", "", "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî", ""]

    if not games:
        # –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º ¬´0 –º–∞—Ç—á–µ–π¬ª
        return "\n".join(lines)

    # –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –ø–æ id
    def game_start_ts(g: dict) -> float:
        # g["startTimeUTC"] –±—ã–≤–∞–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        when = g.get("startTimeUTC")
        try:
            if when:
                ts = dt.datetime.fromisoformat(when.replace("Z", "+00:00")).timestamp()
                return ts
        except Exception:
            pass
        return float(g.get("id", 0))
    games.sort(key=game_start_ts)

    for idx, g in enumerate(games):
        lines.append(build_game_block(g, standings))
        if idx != len(games)-1:
            lines.append("")
            lines.append("")

    return "\n".join(lines)

# =========================
# Telegram
# =========================
def send_telegram(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        print("No TELEGRAM_BOT_TOKEN/CHAT_ID in env", file=sys.stderr)
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    dbg("POST Telegram sendMessage")
    r = SESSION.post(url, json={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }, timeout=20)
    r.raise_for_status()

# =========================
# main
# =========================
if __name__ == "__main__":
    try:
        msg = build_message()
        send_telegram(msg)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
