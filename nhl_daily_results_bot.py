#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NHL Daily Results ‚Üí Telegram
–ì–æ–ª—ã/–∞—Å—Å–∏—Å—Ç—ã —Å api-web.nhle.com (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–µ–π-–±–∞–π-–ø–ª–µ–π),
—Ä—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏ ‚Äî —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ sports.ru.
"""

import os
import sys
import re
import time
import json
from html import escape
from datetime import date, datetime
from urllib.parse import quote_plus
from zoneinfo import ZoneInfo

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ===================== –ü–ê–†–ê–ú–ï–¢–†–´ =====================

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

API_NHL = "https://api-web.nhle.com/v1"
SPORTS_RU_SEARCH = "https://www.sports.ru/search/?q="

# RU-–º–µ—Å—è—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}

def ru_date(d: date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def ru_plural(n: int, forms: tuple[str, str, str]) -> str:
    n = abs(n) % 100
    n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

# –ö–∞—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥: –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ ‚Üí (—Ä—É—Å—Å–∫–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, —ç–º–æ–¥–∑–∏)
TEAM_RU = {
    "ANA": ("–ê–Ω–∞—Ö–∞–π–º", "ü¶Ü"), "ARI": ("–ê—Ä–∏–∑–æ–Ω–∞", "ü§†"), "BOS": ("–ë–æ—Å—Ç–æ–Ω", "üêª"), "BUF": ("–ë–∞—Ñ—Ñ–∞–ª–æ", "ü¶¨"),
    "CGY": ("–ö–∞–ª–≥–∞—Ä–∏", "üî•"), "CAR": ("–ö–∞—Ä–æ–ª–∏–Ω–∞", "üå™"), "COL": ("–ö–æ–ª–æ—Ä–∞–¥–æ", "‚õ∞"), "CBJ": ("–ö–æ–ª–∞–º–±—É—Å", "üí£"),
    "DAL": ("–î–∞–ª–ª–∞—Å", "‚≠ê"), "DET": ("–î–µ—Ç—Ä–æ–π—Ç", "üî¥"), "EDM": ("–≠–¥–º–æ–Ω—Ç–æ–Ω", "üõ¢"), "FLA": ("–§–ª–æ—Ä–∏–¥–∞", "üêÜ"),
    "LAK": ("–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "üëë"), "MIN": ("–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞", "üå≤"), "MTL": ("–ú–æ–Ω—Ä–µ–∞–ª—å", "üá®üá¶"), "NSH": ("–ù—ç—à–≤–∏–ª–ª", "üêØ"),
    "NJD": ("–ù—å—é-–î–∂–µ—Ä—Å–∏", "üòà"), "NYI": ("–ê–π–ª–µ–Ω–¥–µ—Ä—Å", "üü†"), "NYR": ("–†–µ–π–Ω–¥–∂–µ—Ä—Å", "üóΩ"), "OTT": ("–û—Ç—Ç–∞–≤–∞", "üõ°"),
    "PHI": ("–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è", "üõ©"), "PIT": ("–ü–∏—Ç—Ç—Å–±—É—Ä–≥", "üêß"), "SJS": ("–°–∞–Ω-–•–æ—Å–µ", "ü¶à"), "SEA": ("–°–∏—ç—Ç–ª", "ü¶ë"),
    "STL": ("–°–µ–Ω—Ç-–õ—É–∏—Å", "üéµ"), "TBL": ("–¢–∞–º–ø–∞-–ë—ç–π", "‚ö°"), "TOR": ("–¢–æ—Ä–æ–Ω—Ç–æ", "üçÅ"), "VAN": ("–í–∞–Ω–∫—É–≤–µ—Ä", "üê≥"),
    "VGK": ("–í–µ–≥–∞—Å", "üé∞"), "WSH": ("–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "ü¶Ö"), "WPG": ("–í–∏–Ω–Ω–∏–ø–µ–≥", "‚úàÔ∏è"), "UTA": ("–Æ—Ç–∞", "ü¶£"),
    "CHI": ("–ß–∏–∫–∞–≥–æ", "ü¶Ö")
}

def get_today_london() -> date:
    return datetime.now(ZoneInfo("Europe/London")).date()

def log(*args):
    print(*args, file=sys.stderr)

# HTTP —Å —Ä–µ—Ç—Ä–∞—è–º–∏
def make_session():
    s = requests.Session()
    retries = Retry(
        total=6, connect=6, read=6, backoff_factor=0.6,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["GET", "POST"],
        raise_on_status=False,
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({
        "User-Agent": "NHL-DailyResultsBot/2.0 (+api-web.nhle.com; sports.ru resolver)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
    })
    return s

S = make_session()

# ===================== –®–ê–ì 1. –†–ê–°–ü–ò–°–ê–ù–ò–ï/–°–ü–ò–°–û–ö –ú–ê–¢–ß–ï–ô =====================

def fetch_schedule(day: date) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∑–∞ –¥–µ–Ω—å:
    { gameId, gameState, homeAbbrev, awayAbbrev, homeScore, awayScore }
    –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ (gameState == 'OFF').
    """
    url = f"{API_NHL}/schedule/{day.isoformat()}"
    r = S.get(url, timeout=25)
    r.raise_for_status()
    data = r.json()
    games_out = []
    for bucket in data.get("gameWeek", []):
        if bucket.get("date") != day.isoformat():
            continue
        for g in bucket.get("games", []):
            if g.get("gameState") != "OFF":
                continue
            game_id = g.get("id") or g.get("gameId")
            aw = g.get("awayTeam", {})
            hm = g.get("homeTeam", {})
            games_out.append({
                "gameId": int(game_id),
                "homeAbbrev": (hm.get("abbrev") or hm.get("triCode") or "").upper(),
                "awayAbbrev": (aw.get("abbrev") or aw.get("triCode") or "").upper(),
                "homeScore": hm.get("score", 0),
                "awayScore": aw.get("score", 0),
                "periodType": g.get("periodDescriptor", {}).get("periodType") or "",
                "periodNumber": g.get("periodDescriptor", {}).get("number") or 3
            })
    return games_out

# ===================== –®–ê–ì 2. PLAY-BY-PLAY –ü–û –ú–ê–¢–ß–£ =====================

def fetch_box_map(game_id: int) -> dict[int, dict]:
    """
    –ö–∞—Ä—Ç–∞ playerId -> {firstName, lastName, sweaterNumber}
    –∏–∑ boxscore, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞.
    """
    url = f"{API_NHL}/gamecenter/{game_id}/boxscore"
    r = S.get(url, timeout=25)
    r.raise_for_status()
    data = r.json()
    out = {}

    def eat(team_block: dict):
        for group in ("forwards", "defense", "goalies"):
            for p in team_block.get(group, []):
                pid = p.get("playerId")
                if not pid: 
                    continue
                out[int(pid)] = {
                    "firstName": p.get("firstName", {}).get("default") or p.get("firstName") or "",
                    "lastName": p.get("lastName", {}).get("default") or p.get("lastName") or "",
                    "num": p.get("sweaterNumber")
                }

    player_stats = data.get("playerByGameStats", {})
    eat(player_stats.get("homeTeam", {}))
    eat(player_stats.get("awayTeam", {}))
    return out

def fetch_goals(game_id: int) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è-–≥–æ–ª—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:
    [{minute:int, home:int, away:int, scorerId:int, a1:int|None, a2:int|None, periodType:str}]
    """
    url = f"{API_NHL}/gamecenter/{game_id}/play-by-play"
    r = S.get(url, timeout=25)
    r.raise_for_status()
    data = r.json()
    plays = data.get("plays", []) or []
    goals = []

    for ev in plays:
        if ev.get("typeDescKey") != "goal":
            continue
        det = ev.get("details", {}) or {}
        time_in = ev.get("timeInPeriod") or det.get("timeInPeriod") or "0:00"
        # –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "MM:SS" ‚Üí –±–µ—Ä—ë–º –º–∏–Ω—É—Ç—É
        try:
            minute = int(str(time_in).split(":")[0])
        except Exception:
            minute = 0

        # —Å—á—ë—Ç –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –≤–æ—Ä–æ—Ç
        hs = int(det.get("homeScore", 0))
        as_ = int(det.get("awayScore", 0))

        # —É—á–∞—Å—Ç–Ω–∏–∫–∏: scorer + –¥–æ 2 –∞—Å—Å–∏—Å—Ç–æ–≤ (–≤ api-web –æ–±—ã—á–Ω–æ –ª–µ–∂–∞—Ç –∫–∞–∫ *_PlayerId)
        sid = det.get("scoringPlayerId")
        a1 = det.get("assist1PlayerId") or det.get("secondaryAssistPlayerId")
        a2 = det.get("assist2PlayerId") or det.get("tertiaryAssistPlayerId")

        # fallback: –∏–Ω–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–µ–∂–∞—Ç –≤ playersInvolved
        if not sid and ev.get("playersInvolved"):
            for p in ev["playersInvolved"]:
                if p.get("playerType") in ("Scorer", "scorer"):
                    sid = p.get("playerId")
                elif p.get("playerType") in ("Assist", "assist"):
                    if not a1:
                        a1 = p.get("playerId")
                    elif not a2:
                        a2 = p.get("playerId")

        goals.append({
            "minute": minute,
            "home": hs, "away": as_,
            "scorerId": int(sid) if sid else None,
            "a1": int(a1) if a1 else None,
            "a2": int(a2) if a2 else None,
            "periodType": ev.get("periodDescriptor", {}).get("periodType") or ""
        })

    # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ (–ø–µ—Ä–∏–æ–¥, –º–∏–Ω—É—Ç–∞) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    goals.sort(key=lambda x: ({"REG":1,"OT":2,"SO":3}.get(x["periodType"], 1), x["minute"]))
    return goals

# ===================== –®–ê–ì 3. –†–£–°–°–ö–ò–ï –ò–ú–ï–ù–ê –ß–ï–†–ï–ó SPORTS.RU =====================

_name_cache: dict[str, str] = {}  # "Connor McDavid" -> "–ú–∞–∫–¥—ç–≤–∏–¥"

def _ru_surname_from_profile(url: str) -> str | None:
    try:
        r = S.get(url, timeout=25)
        if r.status_code != 200:
            return None
        soup = BeautifulSoup(r.text, "html.parser")
        # —É –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ h1 ‚Äî ¬´–ò–º—è –§–∞–º–∏–ª–∏—è¬ª
        h = soup.find(["h1","h2"])
        if not h:
            return None
        ru_full = " ".join(h.get_text(" ", strip=True).split())
        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é ¬´—Å–ª–æ–≤–æ-–≥—Ä—É–ø–ø—É¬ª –∫–∞–∫ —Ñ–∞–º–∏–ª–∏—é
        parts = [p for p in re.split(r"\s+", ru_full) if p]
        if parts:
            return parts[-1]
    except Exception as e:
        log("[sports.ru] profile parse fail:", e)
    return None

def ru_surname(eng_first: str, eng_last: str) -> str:
    """
    –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ sports.ru –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –∏–º–µ–Ω–∏, –∑–∞–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫—É—é —Ñ–∞–º–∏–ª–∏—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é (–∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ). –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –æ—Ç–¥–∞—ë–º –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.
    –ö—ç—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω.
    """
    key = f"{eng_first.strip()} {eng_last.strip()}".strip()
    if key in _name_cache:
        return _name_cache[key]

    # 1) –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–∏—Å–∫—É sports.ru
    try:
        q = quote_plus(key)
        srch = S.get(SPORTS_RU_SEARCH + q, timeout=25)
        if srch.status_code == 200:
            soup = BeautifulSoup(srch.text, "html.parser")
            # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
            # —á–∞—â–µ –≤—Å–µ–≥–æ href –≤–∏–¥–∞ /hockey/person/<slug>/
            link = soup.select_one('a[href*="/hockey/person/"]')
            if link and link.get("href"):
                profile = link["href"]
                if profile.startswith("/"):
                    profile = "https://www.sports.ru" + profile
                ru = _ru_surname_from_profile(profile)
                if ru:
                    _name_cache[key] = ru
                    return ru
    except Exception as e:
        log("[sports.ru] search fail:", key, e)

    # 2) –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ–≥–∞ –∏–≥—Ä–æ–∫–∞ (–∏–Ω–æ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç)
    try:
        slug = "-".join((eng_first + " " + eng_last).lower().split())
        maybe = f"https://www.sports.ru/{slug}/"
        ru = _ru_surname_from_profile(maybe)
        if ru:
            _name_cache[key] = ru
            return ru
    except Exception:
        pass

    # 3) —Å–æ–≤—Å–µ–º —É–∂ fallback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π —Ñ–∞–º–∏–ª–∏—é
    last = eng_last.strip() or key
    _name_cache[key] = last
    return last

# ===================== –°–ë–û–†–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø =====================

def team_ru_and_emoji(abbr: str) -> tuple[str, str]:
    abbr = (abbr or "").upper()
    if abbr in TEAM_RU:
        return TEAM_RU[abbr]
    return (abbr, "üèí")

def build_game_block(game: dict) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ –ø–æ –º–∞—Ç—á—É:
    <emoji> ¬´Home¬ª: X
    <emoji> ¬´Away¬ª: Y

    0:1 ‚Äì 10 –§–∞–º–∏–ª–∏—è (–§–∞–º–∏–ª–∏—è, –§–∞–º–∏–ª–∏—è)
    ...
    """
    game_id = game["gameId"]
    home_ab, away_ab = game["homeAbbrev"], game["awayAbbrev"]
    home_ru, emh = team_ru_and_emoji(home_ab)
    away_ru, ema = team_ru_and_emoji(away_ab)

    goals = fetch_goals(game_id)
    boxmap = fetch_box_map(game_id)  # id -> names

    # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å "(–û–¢)" –∏–ª–∏ "(–ë)" –ø–æ —Ç–∏–ø—É –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–∞
    suffix = ""
    if goals:
        last_pt = goals[-1].get("periodType", "")
        if last_pt == "OT":
            suffix = " (–û–¢)"
        elif last_pt == "SO":
            suffix = " (–ë)"

    lines = []
    for g in goals:
        # –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ boxmap
        def name(pid):
            if not pid or pid not in boxmap:
                return None
            f = boxmap[pid].get("firstName") or ""
            l = boxmap[pid].get("lastName") or ""
            return ru_surname(f, l)

        scorer = name(g["scorerId"])
        a1 = name(g["a1"])
        a2 = name(g["a2"])

        assists = []
        if a1: assists.append(a1)
        if a2: assists.append(a2)
        ast_txt = f" ({', '.join(assists)})" if assists else ""

        # —Ñ–æ—Ä–º–∞—Ç: h:a ‚Äì MIN –§–∞–º–∏–ª–∏—è (–∞—Å—Å–∏—Å—Ç—ã)
        lines.append(f"{g['home']}:{g['away']} ‚Äì {g['minute']} {scorer or ''}{ast_txt}")

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç (–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
    head = (
        f"{emh} ¬´{home_ru}¬ª: {game['homeScore']}\n"
        f"{ema} ¬´{away_ru}¬ª: {game['awayScore']}{suffix}\n\n"
    )

    if not lines:
        lines = ["‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∑–∞–ø–∏—Å—å –≥–æ–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]

    return head + "\n".join(lines)

def build_post(day: date) -> str:
    games = fetch_schedule(day)
    title = f"üóì –†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ù–•–õ ‚Ä¢ {ru_date(day)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á', '–º–∞—Ç—á–∞', '–º–∞—Ç—á–µ–π'))}\n\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"

    blocks = []
    for i, g in enumerate(games, 1):
        try:
            blocks.append(build_game_block(g))
        except Exception as e:
            log(f"[WARN] game {g.get('gameId')} failed:", e)
            # –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —à–∞–ø–∫—É —Å–æ —Å—á—ë—Ç–æ–º
            home_ru, emh = team_ru_and_emoji(g["homeAbbrev"])
            away_ru, ema = team_ru_and_emoji(g["awayAbbrev"])
            blocks.append(
                f"{emh} ¬´{home_ru}¬ª: {g['homeScore']}\n{ema} ¬´{away_ru}¬ª: {g['awayScore']}\n\n‚Äî —Å–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )

        if i < len(games):
            blocks.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    return title + "\n".join(blocks).strip()

# ===================== –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM =====================

def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    MAX = 3500  # –∑–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞ 4096
    chunks = []
    t = text
    while t:
        if len(t) <= MAX:
            chunks.append(t)
            break
        cut = t.rfind("\n\n", 0, MAX)
        if cut == -1:
            cut = MAX
        chunks.append(t[:cut])
        t = t[cut:].lstrip()

    for part in chunks:
        resp = S.post(url, json={
            "chat_id": CHAT_ID,
            "text": part,
            "disable_web_page_preview": True,
        }, timeout=25)
        if resp.status_code != 200:
            raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")
        time.sleep(0.5)

# ===================== MAIN =====================

if __name__ == "__main__":
    try:
        day = get_today_london()
        msg = build_post(day)
        tg_send(msg)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
