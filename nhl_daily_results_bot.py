#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NHL ‚Üí Telegram (RU): –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ NHL, –∏–º–µ–Ω–∞ —Å sports.ru (–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ö–∞–ª–µ–Ω–¥–∞—Ä—å)

–õ–æ–≥–∏–∫–∞:
1) –ë–µ—Ä—ë–º –æ–∫–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è –ø–æ –ú–°–ö:
   - –≤—Å–µ –º–∞—Ç—á–∏ REPORT_DATE,
   - –∏ –º–∞—Ç—á–∏ REPORT_DATE-1, –Ω–∞—á–∞–≤—à–∏–µ—Å—è >= 15:00 –ú–°–ö.
2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞:
   - —Ç—è–Ω–µ–º play-by-play –∏–∑ api-web.nhle.com (–ø–µ—Ä–∏–æ–¥, timeInPeriod, —Å—á—ë—Ç –ø–æ—Å–ª–µ –≥–æ–ª–∞, –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç, –û–¢/–ë).
   - –Ω–∞—Ö–æ–¥–∏–º —ç—Ç–æ—Ç –∂–µ –º–∞—Ç—á –Ω–∞ sports.ru:
       –°–ù–ê–ß–ê–õ–ê ‚Äî —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—É—Ä–Ω–∏—Ä–∞ https://www.sports.ru/hockey/tournament/nhl/calendar/
       (–∏—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ home/away —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞—é—Ç);
       –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫ sports.ru.
   - —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞ sports.ru –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ–≤, —Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É:
       key = (period, "MM:SS") ‚Üí value = (–ê–≤—Ç–æ—Ä_¬´–ò. –§–∞–º–∏–ª–∏—è¬ª, [–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã_¬´–ò. –§–∞–º–∏–ª–∏—è¬ª])
   - —Å–∫–ª–µ–∏–≤–∞–µ–º —Å NHL –ø–æ –∫–ª—é—á—É (period,timeInPeriod). –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–∫—Ä–∏–ø—Ç –ø–∞–¥–∞–µ—Ç (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Å–æ—á–∏–ª—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π).
   - –±—É–ª–ª–∏—Ç—ã: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ ¬´–ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç¬ª.
3) –ü–µ—á–∞—Ç—å: –∂–∏—Ä–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º, –≤—Ä–µ–º—è –≤ –∞–±—Å–æ–ª—é—Ç–µ (mm.ss), —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç.

ENV:
  TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
  REPORT_DATE=YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ú–°–ö)
"""

import os, sys, re, json, time, random, datetime as dt
from zoneinfo import ZoneInfo
from html import escape
from typing import Dict, List, Tuple, Any, Optional

import requests
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TZ_MSK = ZoneInfo("Europe/Moscow")
API = "https://api-web.nhle.com"
SPORTS_CAL = "https://www.sports.ru/hockey/tournament/nhl/calendar/"
SPORTS_SEARCH = "https://www.sports.ru/search/"

TEAM_META = {
    "NJD": ("üòà", "–ù—å—é-–î–∂–µ—Ä—Å–∏"),
    "NYI": ("üü†", "–ê–π–ª–µ–Ω–¥–µ—Ä—Å"),
    "NYR": ("üóΩ", "–†–µ–π–Ω–¥–∂–µ—Ä—Å"),
    "PHI": ("üõ©", "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è"),
    "PIT": ("üêß", "–ü–∏—Ç—Ç—Å–±—É—Ä–≥"),
    "BOS": ("üêª", "–ë–æ—Å—Ç–æ–Ω"),
    "BUF": ("ü¶¨", "–ë–∞—Ñ—Ñ–∞–ª–æ"),
    "MTL": ("üá®üá¶", "–ú–æ–Ω—Ä–µ–∞–ª—å"),
    "OTT": ("üõ°", "–û—Ç—Ç–∞–≤–∞"),
    "TOR": ("üçÅ", "–¢–æ—Ä–æ–Ω—Ç–æ"),
    "CAR": ("üå™Ô∏è", "–ö–∞—Ä–æ–ª–∏–Ω–∞"),
    "FLA": ("üêÜ", "–§–ª–æ—Ä–∏–¥–∞"),
    "TBL": ("‚ö°", "–¢–∞–º–ø–∞-–ë—ç–π"),
    "WSH": ("ü¶Ö", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω"),
    "CHI": ("ü¶Ö", "–ß–∏–∫–∞–≥–æ"),
    "DET": ("üî¥", "–î–µ—Ç—Ä–æ–π—Ç"),
    "NSH": ("üêØ", "–ù—ç—à–≤–∏–ª–ª"),
    "STL": ("üéµ", "–°–µ–Ω—Ç-–õ—É–∏—Å"),
    "CGY": ("üî•", "–ö–∞–ª–≥–∞—Ä–∏"),
    "EDM": ("üõ¢Ô∏è", "–≠–¥–º–æ–Ω—Ç–æ–Ω"),
    "VAN": ("üê≥", "–í–∞–Ω–∫—É–≤–µ—Ä"),
    "ANA": ("ü¶Ü", "–ê–Ω–∞—Ö–∞–π–º"),
    "DAL": ("‚≠ê", "–î–∞–ª–ª–∞—Å"),
    "LAK": ("üëë", "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å"),
    "SJS": ("ü¶à", "–°–∞–Ω-–•–æ—Å–µ"),
    "CBJ": ("üí£", "–ö–æ–ª–∞–º–±—É—Å"),
    "COL": ("‚õ∞Ô∏è", "–ö–æ–ª–æ—Ä–∞–¥–æ"),
    "MIN": ("üå≤", "–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞"),
    "WPG": ("‚úàÔ∏è", "–í–∏–Ω–Ω–∏–ø–µ–≥"),
    "ARI": ("ü¶£", "–Æ—Ç–∞"),   # –ê—Ä–∏–∑–æ–Ω–∞ ‚Üí –Æ—Ç–∞
    "SEA": ("ü¶ë", "–°–∏—ç—Ç–ª"),
    "VGK": ("üé∞", "–í–µ–≥–∞—Å"),
}

RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"
}
def ru_date(d: dt.date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HTTP —Å —Ä–µ—Ç—Ä–∞—è–º–∏
def make_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=6, connect=6, read=6, backoff_factor=0.6,
        status_forcelist=[429,500,502,503,504],
        allowed_methods=["GET","POST"],
        raise_on_status=False,
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({
        "User-Agent": "NHL-RU-Merger/1.1",
        "Accept": "text/html,application/json,*/*",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
        "Connection": "keep-alive",
    })
    return s

S = make_session()

def get_json(url: str) -> dict:
    r = S.get(url, timeout=25)
    if r.status_code == 200:
        return r.json()
    raise RuntimeError(f"GET {url} -> {r.status_code}")

def get_html(url: str) -> str:
    r = S.get(url, timeout=25)
    if r.status_code == 200:
        return r.text
    raise RuntimeError(f"GET {url} -> {r.status_code}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–∫–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è
def report_date() -> dt.date:
    env = os.getenv("REPORT_DATE","").strip()
    if env:
        return dt.date.fromisoformat(env)
    return dt.datetime.now(TZ_MSK).date()

def window_msk(d: dt.date) -> Tuple[dt.datetime, dt.datetime]:
    start = dt.datetime.combine(d - dt.timedelta(days=1), dt.time(15,0), tzinfo=TZ_MSK)
    end   = dt.datetime.combine(d, dt.time(23,59,59,999000), tzinfo=TZ_MSK)
    return start, end

def to_msk(utc_iso: str) -> dt.datetime:
    return dt.datetime.fromisoformat(utc_iso.replace("Z","+00:00")).astimezone(TZ_MSK)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ NHL schedule & PBP
def pick_games(d: dt.date) -> List[dict]:
    start, end = window_msk(d)
    games = []
    for day in (d - dt.timedelta(days=1), d):
        js = get_json(f"{API}/v1/schedule/{day.isoformat()}")
        lst = js.get("games") or js.get("gameWeek",[{}])[0].get("games",[])
        games.extend(lst)
    picked = []
    seen = set()
    for g in games:
        gid = int(g.get("id") or 0)
        if not gid or gid in seen: continue
        seen.add(gid)
        utc = g.get("startTimeUTC") or g.get("startTime")
        if not utc: continue
        msk = to_msk(utc)
        if start <= msk <= end:
            picked.append({
                "id": gid,
                "msk": msk,
                "home": g["homeTeam"]["abbrev"],
                "away": g["awayTeam"]["abbrev"],
            })
    picked.sort(key=lambda x: x["msk"])
    return picked

def nhl_play_by_play(gid: int) -> dict:
    return get_json(f"{API}/v1/gamecenter/{gid}/play-by-play")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è
def abs_time(period: int, mmss: str) -> str:
    m = re.match(r"^\s*(\d{1,2})[:.](\d{2})\s*$", mmss)
    if not m:
        return mmss.replace(":", ".")
    mm, ss = int(m.group(1)), int(m.group(2))
    base = (period-1)*20 if period<=3 else 60 + 5*(period-4)
    return f"{base + mm}.{ss:02d}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ –Ω–∞ sports.ru —á–µ—Ä–µ–∑ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
def find_sportsru_match_url_via_calendar(home_ru: str, away_ru: str, start_msk: dt.datetime) -> Optional[str]:
    """
    –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ:
      - owner-td a.player —Å–æ–¥–µ—Ä–∂–∏—Ç home_ru,
      - guests-td a.player —Å–æ–¥–µ—Ä–∂–∏—Ç away_ru,
      - —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–æ –º–∏–Ω—É—Ç).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É —Å–æ —Å—Ç–æ–ª–±—Ü–∞ score-td (—Å–∞–º–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞).
    """
    html = get_html(SPORTS_CAL)
    soup = BeautifulSoup(html, "html.parser")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
    def norm_team(s: str) -> str:
        return re.sub(r"\s+", " ", s).strip().lower()

    home_key = norm_team(home_ru)
    away_key = norm_team(away_ru)
    date_key = start_msk.strftime("%d.%m.%Y")
    time_key = start_msk.strftime("%H:%M")

    for tr in soup.find_all("tr"):
        try:
            td_name = tr.find("td", class_=re.compile(r"name-td"))
            td_home = tr.find("td", class_=re.compile(r"owner-td"))
            td_away = tr.find("td", class_=re.compile(r"guests-td"))
            td_score = tr.find("td", class_=re.compile(r"score-td"))
            if not (td_name and td_home and td_away and td_score):
                continue

            # –¥–∞—Ç–∞|–≤—Ä–µ–º—è
            a_dt = td_name.find("a")
            dt_text = a_dt.get_text(" ", strip=True) if a_dt else ""
            if date_key not in dt_text or time_key not in dt_text:
                continue

            # –∫–æ–º–∞–Ω–¥—ã
            a_home = td_home.find("a", class_=re.compile(r"player"))
            a_away = td_away.find("a", class_=re.compile(r"player"))
            home_txt = a_home.get("title") or a_home.get_text(" ", strip=True) if a_home else ""
            away_txt = a_away.get("title") or a_away.get_text(" ", strip=True) if a_away else ""
            if norm_team(home_txt) != home_key or norm_team(away_txt) != away_key:
                continue

            # —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á ‚Äî –≤ score-td
            a_score = td_score.find("a", href=True)
            if not a_score:
                continue
            href = a_score["href"]
            if not href.startswith("http"):
                href = "https://www.sports.ru" + href
            return href
        except Exception:
            continue

    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ sports.ru (–µ—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –¥–∞–ª —Å—Å—ã–ª–∫—É)
def find_sportsru_match_url_via_search(home_ru: str, away_ru: str, d: dt.date) -> Optional[str]:
    query = f"{home_ru} {away_ru} –ù–•–õ {ru_date(d)} {d.year}"
    r = S.get(SPORTS_SEARCH, params={"q": query}, timeout=25)
    if r.status_code != 200:
        return None
    soup = BeautifulSoup(r.text, "html.parser")
    cands = []
    for a in soup.find_all("a", href=True):
        href = a["href"]
        txt = a.get_text(" ", strip=True)
        if "/hockey/match/" in href and href.endswith(".html"):
            if not href.startswith("http"):
                href = "https://www.sports.ru" + href
            # –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±–µ –∫–æ–º–∞–Ω–¥—ã (—Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º)
            if (home_ru.split()[0] in txt) and (away_ru.split()[0] in txt):
                cands.append(href)
    if not cands:
        for a in soup.find_all("a", href=True):
            href = a["href"]
            if "/hockey/match/" in href and href.endswith(".html"):
                if not href.startswith("http"):
                    href = "https://www.sports.ru" + href
                cands.append(href)
    return cands[0] if cands else None

def find_sportsru_match_url(home_ru: str, away_ru: str, start_msk: dt.datetime) -> Optional[str]:
    # 1) –ø—Ä–æ–±—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    u = find_sportsru_match_url_via_calendar(home_ru, away_ru, start_msk)
    if u:
        return u
    # 2) –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ –¥–∞—Ç—É –º–∞—Ç—á–∞
    u = find_sportsru_match_url_via_search(home_ru, away_ru, start_msk.date())
    if u:
        return u
    # 3) –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –Ω–∞ —Å–æ—Å–µ–¥–Ω—é—é –¥–∞—Ç—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    u = find_sportsru_match_url_via_search(home_ru, away_ru, (start_msk - dt.timedelta(days=1)).date())
    return u

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ–≤ –Ω–∞ sports.ru -> –∫–∞—Ä—Ç–∞ (period, "MM:SS") -> (–ê–≤—Ç–æ—Ä, [–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã])
GOAL_LINE_RE = re.compile(
    r"(?P<score>\d+:\d+)\s*[‚Äî‚Äì-]\s*(?P<time>\d{1,2}[:.]\d{2})\s+(?P<who>[–ê-–Ø–Å][^()\n\r]*?)(?:\s*\((?P<ass>[^)]*)\))?(?=\s|$)",
    re.U
)
PERIOD_HEADERS = [
    (re.compile(r"\b1[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 1),
    (re.compile(r"\b2[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 2),
    (re.compile(r"\b3[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥\b", re.I | re.U), 3),
    (re.compile(r"\b–û–≤–µ—Ä—Ç–∞–π–º(?:\s*‚Ññ\s*(\d+))?\b", re.I | re.U), 4),  # 4 = OT1; –µ—Å–ª–∏ ‚ÑñN ‚Üí 3+N
]

def ru_initial(full: str) -> str:
    t = re.sub(r"\s+", " ", (full or "").strip())
    if not t: return ""
    parts = t.split(" ")
    if len(parts) == 1:
        return parts[0]
    return f"{parts[0][0]}. {parts[-1]}"

def parse_sportsru_goals(url: str) -> Tuple[Dict[Tuple[int,str], Tuple[str, List[str]]], Optional[str]]:
    html = get_html(url)
    soup = BeautifulSoup(html, "html.parser")
    txt = soup.get_text("\n", strip=True)
    txt = txt.replace("‚Äî", "‚Äì").replace("‚àí", "‚Äì").replace("‚Äí", "‚Äì")

    # –≤—ã–¥–µ–ª–∏–º —Ä–∞–∑–¥–µ–ª —Å –≥–æ–ª–∞–º–∏ (–º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    start = None
    for m in re.finditer(r"(1[-‚Äì]?–π\s+–ø–µ—Ä–∏–æ–¥|–ì–æ–ª—ã|–•–æ–¥ –º–∞—Ç—á–∞)", txt, re.I):
        start = m.start(); break
    if start is None:
        start = 0
    endm = re.search(r"(–ë—É–ª–ª–∏—Ç—ã|–°–µ—Ä–∏—è –±—É–ª–ª–∏—Ç–æ–≤|–£–¥–∞–ª–µ–Ω–∏—è|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–°–æ—Å—Ç–∞–≤—ã)", txt, re.I)
    end = endm.start() if endm else len(txt)
    section = txt[start:end]

    period = 1
    by_key: Dict[Tuple[int,str], Tuple[str, List[str]]] = {}
    lines = [ln.strip() for ln in section.split("\n") if ln.strip()]
    for ln in lines:
        # —Å–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞
        switched = False
        for rx, base in PERIOD_HEADERS:
            m = rx.search(ln)
            if m:
                if base == 4 and m.lastindex == 1 and m.group(1):
                    period = 3 + max(1, int(m.group(1)))
                else:
                    period = base
                switched = True
                break
        if switched:
            continue

        for m in GOAL_LINE_RE.finditer(ln):
            mmss = m.group("time").replace(".", ":")
            who = m.group("who").strip()
            ass = (m.group("ass") or "").strip()
            who_sh = ru_initial(re.split(r"\s+[‚Äì-]\s+", who)[0].strip())
            assists: List[str] = []
            if ass:
                for a in ass.split(","):
                    aa = ru_initial(re.split(r"\s+[‚Äì-]\s+", a.strip())[0].strip())
                    if aa:
                        assists.append(aa)
            by_key[(period, mmss)] = (who_sh, assists)

    # –ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç
    so_winner = None
    m = re.search(r"–ü–æ–±–µ–¥–Ω—ã–π\s+–±—É–ª–ª–∏—Ç[:\s‚Äì-]+([–ê-–Ø–Å][^,\n\r]+)", txt, re.I)
    if m:
        so_winner = ru_initial(m.group(1).strip())

    return by_key, so_winner

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–≤–æ–¥ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
def build_match_block(g: dict) -> str:
    gid = g["id"]
    pbp = nhl_play_by_play(gid)

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç + —Ä–µ—à–µ–Ω–∏–µ
    final_home = pbp.get("homeTeam", {}).get("score", 0)
    final_away = pbp.get("awayTeam", {}).get("score", 0)
    decision = (pbp.get("gameOutcome") or {}).get("lastPeriodType")  # "REG"/"OT"/"SO"

    # –≥–æ–ª—ã –∏–∑ NHL
    nhl_goals = []
    for ev in pbp.get("plays", []):
        if (ev.get("typeDescKey") or "").lower() != "goal":
            continue
        per = int((ev.get("periodDescriptor") or {}).get("number") or 0)
        t_in = (ev.get("timeInPeriod") or ev.get("timeRemaining") or "00:00").strip()
        hs = ev.get("homeScore", 0)
        as_ = ev.get("awayScore", 0)
        nhl_goals.append({"period": per, "t": t_in, "score": f"{hs}:{as_}"})

    # —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ —Å–æ sports.ru: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    h_emoji, h_ru = TEAM_META.get(g["home"], ("üèí", g["home"]))
    a_emoji, a_ru = TEAM_META.get(g["away"], ("üèí", g["away"]))

    url = find_sportsru_match_url(h_ru, a_ru, g["msk"])
    if not url:
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ç—á –Ω–∞ sports.ru –¥–ª—è {h_ru} ‚Äî {a_ru} ({g['msk']:%d.%m})")

    ru_map, so_winner = parse_sportsru_goals(url)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∂–∏—Ä–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    home_line = f"{h_emoji} ¬´{h_ru}¬ª: {final_home}"
    away_line = f"{a_emoji} ¬´{a_ru}¬ª: {final_away}"
    if final_home > final_away:
        home_line = f"<b>{home_line}</b>"
    elif final_away > final_home:
        away_line = f"<b>{away_line}</b>"
    suffix = ""
    if decision == "OT": suffix = " (–û–¢)"
    if decision == "SO": suffix = " (–ë)"

    parts = [home_line + suffix, away_line, ""]

    # –°–∫–ª–µ–π–∫–∞ –≥–æ–ª–æ–≤ –ø–æ –∫–ª—é—á—É (period, "MM:SS")
    missing = []
    goals_by_period: Dict[int, List[str]] = {}
    for ev in nhl_goals:
        key = (ev["period"], ev["t"])
        if key not in ru_map:
            # –∑–∞–ø–∞—Å–Ω–æ–π –∫–ª—é—á –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ –Ω—É–ª—è –≤ –º–∏–Ω—É—Ç–∞—Ö
            mm, ss = ev["t"].split(":")
            alt = f"{int(mm)}:{ss}"
            if (ev["period"], alt) in ru_map:
                key = (ev["period"], alt)
            else:
                missing.append(f"p{ev['period']} {ev['t']} ({ev['score']})")
                continue
        who, assists = ru_map[key]
        line = f"{ev['score']} ‚Äì {abs_time(ev['period'], ev['t'])} {who}"
        if assists:
            line += f" ({', '.join(assists)})"
        goals_by_period.setdefault(ev["period"], []).append(line)

    if missing:
        raise RuntimeError("–ù–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ sports.ru:\n" + "\n".join(missing))

    for p in sorted(goals_by_period.keys()):
        if p <= 3:
            parts.append(f"<i>{p}-–π –ø–µ—Ä–∏–æ–¥</i>")
        else:
            parts.append(f"<i>–û–≤–µ—Ä—Ç–∞–π–º ‚Ññ{p-3}</i>")
        parts.extend(goals_by_period[p])

    if decision == "SO" and so_winner:
        parts.append("–ü–æ–±–µ–¥–Ω—ã–π –±—É–ª–ª–∏—Ç")
        parts.append(so_winner)

    return "\n".join(parts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º
def build_post(d: dt.date) -> str:
    games = pick_games(d)
    title = f"üóì –†–µ–≥—É–ª—è—Ä–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ù–•–õ ‚Ä¢ {ru_date(d)} ‚Ä¢ {len(games)} " + \
            ("–º–∞—Ç—á" if len(games)==1 else "–º–∞—Ç—á–∞" if len(games)%10 in (2,3,4) and not 12<=len(games)%100<=14 else "–º–∞—Ç—á–µ–π")
    head = f"{title}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n"

    if not games:
        return head.strip()

    blocks = []
    for i, g in enumerate(games, 1):
        blocks.append(build_match_block(g))
        if i < len(games):
            blocks.append("")
    return head + "\n".join(blocks).strip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram
def tg_send(text: str):
    token, chat = os.getenv("TELEGRAM_BOT_TOKEN","").strip(), os.getenv("TELEGRAM_CHAT_ID","").strip()
    if not token or not chat:
        print(text)
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    r = S.post(url, json={"chat_id": chat, "text": text, "parse_mode":"HTML", "disable_web_page_preview": True}, timeout=25)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text[:200]}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main
if __name__ == "__main__":
    try:
        d = report_date()
        msg = build_post(d)
        tg_send(msg)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
